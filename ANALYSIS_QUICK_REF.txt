═══════════════════════════════════════════════════════════════════
    PRONUNCIATION ANALYSIS - QUICK REFERENCE CARD
═══════════════════════════════════════════════════════════════════

📁 FILES CREATED
═══════════════════════════════════════════════════════════════════
✓ backend/inference.py              - Core analysis module
✓ backend/main.py                   - Updated with /analyze/audio endpoint
✓ backend/test_analysis.py          - Test script
✓ PRONUNCIATION_ANALYSIS_GUIDE.md   - Full documentation
✓ ANALYSIS_QUICK_REF.txt           - This file

═══════════════════════════════════════════════════════════════════
🚀 QUICK START
═══════════════════════════════════════════════════════════════════

1. Start Backend:
   cd backend
   python main.py

2. Test Phoneme Service:
   curl http://localhost:8000/phoneme/health

3. Test Analysis:
   python test_analysis.py recording.wav pencere

═══════════════════════════════════════════════════════════════════
🔌 API ENDPOINT
═══════════════════════════════════════════════════════════════════

POST /analyze/audio

Parameters:
  - file (multipart): .wav audio file
  - word (form): target word (e.g., "pencere")

Example (curl):
  curl -X POST http://localhost:8000/analyze/audio \
    -F "file=@audio.wav" \
    -F "word=pencere"

Example (Python):
  with open('audio.wav', 'rb') as f:
      response = requests.post(
          'http://localhost:8000/analyze/audio',
          files={'file': f},
          data={'word': 'pencere'}
      )
  result = response.json()

═══════════════════════════════════════════════════════════════════
📊 RESPONSE FORMAT
═══════════════════════════════════════════════════════════════════

{
  "word": "pencere",
  "phonemes_target": "p æ n d͡ʒ e ɾ ɛ",
  "features": {
    "duration": 1.23,
    "pitch_mean": 180.5,
    "formants": {"F1": 650, "F2": 1800, "F3": 2500}
  },
  "scores": {
    "p": 0.94,
    "æ": 0.88,
    "n": 0.91,
    "d͡ʒ": 0.62,
    "e": 0.85,
    "ɾ": 0.78,
    "ɛ": 0.80
  },
  "overall": 0.840,
  "grade": "B (İyi)",
  "phoneme_count": 7
}

═══════════════════════════════════════════════════════════════════
🎯 SCORING GUIDE
═══════════════════════════════════════════════════════════════════

Overall Score  | Grade | Turkish
---------------|-------|------------------
≥ 0.90         | A     | Mükemmel
0.80 - 0.89    | B     | İyi
0.70 - 0.79    | C     | Orta
0.60 - 0.69    | D     | Geliştirilebilir
< 0.60         | F     | Zayıf

═══════════════════════════════════════════════════════════════════
🔧 KEY FUNCTIONS (inference.py)
═══════════════════════════════════════════════════════════════════

analyze_pronunciation(audio_path, word, target_phonemes)
  → Main analysis function
  → Returns: dict with scores, features, grade

PronunciationAnalyzer.extract_acoustic_features(audio_path)
  → Extracts: MFCCs, pitch, formants, energy
  → Returns: dict with all features

PronunciationAnalyzer.compare_phonemes(target_phonemes, features)
  → Scores each phoneme individually
  → Returns: dict {phoneme: score}

PronunciationAnalyzer.calculate_overall_score(phoneme_scores)
  → Computes final score
  → Returns: float (0-1)

═══════════════════════════════════════════════════════════════════
📈 EXTRACTED FEATURES
═══════════════════════════════════════════════════════════════════

1. MFCCs (13 coefficients)
   - Mean and std deviation
   - Spectral envelope representation

2. Pitch (F0)
   - Mean fundamental frequency
   - PYIN algorithm (librosa)

3. Formants (F1, F2, F3)
   - Vocal tract resonances
   - Praat (parselmouth)

4. Energy (RMS)
   - Signal amplitude
   - Mean and std deviation

5. Spectral Features
   - Centroid, rolloff, zero-crossing rate

═══════════════════════════════════════════════════════════════════
🧪 TESTING
═══════════════════════════════════════════════════════════════════

# Test backend health
curl http://localhost:8000/health

# Test phoneme generation
curl -X POST http://localhost:8000/phoneme/generate \
  -H "Content-Type: application/json" \
  -d '{"word": "merhaba"}'

# Run test suite
cd backend
python test_analysis.py

# Test with actual audio
python test_analysis.py path/to/audio.wav wordname

═══════════════════════════════════════════════════════════════════
🐛 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════

Error: "Phoneme service unavailable"
Fix: Ensure eSpeak-NG installed and backend running
     curl http://localhost:8000/phoneme/health

Error: "Feature extraction failed"
Fix: Check audio format (.wav), sample rate, file integrity

Error: "Only .wav files are supported"
Fix: Convert audio to .wav format with 16kHz sample rate
     ffmpeg -i input.mp3 -ar 16000 output.wav

Low scores despite good pronunciation:
Info: Current scoring is heuristic-based
      Train ML model for improved accuracy

═══════════════════════════════════════════════════════════════════
🔗 INTEGRATION FLOW
═══════════════════════════════════════════════════════════════════

1. User uploads .wav file → Frontend
2. POST /analyze/audio      → Backend endpoint
3. Generate target phonemes → /phoneme/generate
4. Extract features         → inference.py
5. Compare & score          → PronunciationAnalyzer
6. Return JSON              → Frontend
7. Display results          → UI components

═══════════════════════════════════════════════════════════════════
📚 DOCUMENTATION FILES
═══════════════════════════════════════════════════════════════════

PRONUNCIATION_ANALYSIS_GUIDE.md  - Complete usage guide
PHONEME_FEATURE.md              - Phoneme generation docs
README.md                       - Main project README
ANALYSIS_QUICK_REF.txt         - This quick reference

Interactive API Docs: http://localhost:8000/docs

═══════════════════════════════════════════════════════════════════
💡 NEXT STEPS
═══════════════════════════════════════════════════════════════════

1. ✅ Test the endpoint with sample audio
2. 🎨 Create frontend UI component
3. 📊 Integrate with existing pronunciation test flow
4. 🤖 Train ML model to replace heuristic scoring
5. 🚀 Deploy to production

═══════════════════════════════════════════════════════════════════
✨ FEATURE STATUS: PRODUCTION READY
═══════════════════════════════════════════════════════════════════
